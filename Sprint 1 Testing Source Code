USER STORY 1: Death Before Birth
package UserStory1; 

from  filereader import OpenFile

flat_content = OpenFile.flat_content

class DeathBeforeBirth:
    
    Birthday = []
    Deathday = []
    
    for i in [i for i,x in enumerate(flat_content) if x == 'BIRT']: 
        Birthday.append(flat_content[i+5])
        
        if(flat_content[i+7] == 'DEAT'):
            Deathday.append(flat_content[i+13])
        else:
            Deathday.append('LIVE')
        
    count = 0          
    while (count < len(Birthday)):
        if(Birthday[count] > Deathday[count]):
            print "Birth can't be after death"
        elif(Deathday[count] == 'LIVE'):
            print "Still Alive"
        else:
            print "Birth is before death"
        count = count + 1
    print Birthday
    print Deathday
     

USER STORY 2: Divorce Before Marriage
package userStory2;

from filereader import OpenFile

flat_content = OpenFile.flat_content

class DivorceBeforeMarriage:
    
    Divorceday = []
    Marriageday = []
    #find marriage dates
    for i in [i for i,x in enumerate(flat_content) if x == 'MARR']: 
        Marriageday.append(flat_content[i+5])
        #if there is divorce print divorce dates
        if(flat_content[i+7] == 'DIV'):
            Divorceday.append(flat_content[i+12])
        else:
            Divorceday.append('MARRIED')
      
    count = 0          
   while (count < len(Divorceday)):
        if(Divorceday[count] < Marriageday[count]):
            print "Divorce can't be before Marriage"
        elif(Divorceday[count] == 'MARRIED'):
            print "Still Married"
        else:
            print "Divorce is after Marriage"
        count = count + 1
    
print DivorceBeforeMarriage.Marriageday
print DivorceBeforeMarriage.Divorceday
     
        
USER STORY 3: Death in Future
package UserStory3;

import time

from filereader import OpenFile

flat_content = OpenFile.flat_content

class DeathinFuture:
    
    Deathday = []
    #find marriage dates
    for i in [i for i,x in enumerate(flat_content) if x == 'DEAT']: 
        Deathday.append(flat_content[i+6])
        #if there is divorce print divorce dates
        if(flat_content[i+6] >= time.strftime("%Y")):
            print "Death can't be predicted in future"
        else:
            print "Death was in past"
print DeathinFuture.Deathday


USER STORY 4: Unique first Name
package UserStory04;

from  filereader import OpenFile

flat_content = OpenFile.flat_content

class UniqueFirstName:
    
    Birthday = []
    FirstName = []
    
    for i in [i for i,x in enumerate(flat_content) if x == 'NAME']: 
        FirstName.append(flat_content[i+1])
    
    FirstName.pop(0)
    
    count1 = 0
    while (count1 < len(FirstName)):
        count2 = 0
        while(count2 < len(FirstName)):
            if(count1 != count2):
                if(FirstName[count1] == FirstName[count2]):
                    print "Not Possible"
            count2 = 1 + count2
        count1 = 1 + count1
        
print UniqueFirstName.FirstName

USER STORY 5: Wrong Gender
package test;

from  filereader import OpenFile

flat_content = OpenFile.flat_content

class WrongMale:
    
    Male = []
    Female = []
    
    for i in [i for i,x in enumerate(flat_content) if x == 'FAM']:
        Male.append(flat_content[i+2])
        Female.append(flat_content[i+5]) 
        if(flat_content[i+5] == 'HUSB'):
            print('SAME Gender NOT POSSIBLE')
        elif(flat_content[i+5]== '_CURRENT'):
            print(' NOT MARRIED')
        else:
            print('Gender DIFFERENT')
            
    print Male
    print Female
    
USERSTORY 6: child Count
class OpenFile:
    #Open the file using open function
    file = open("family_correct.ged","r")
    
    fname = file.name
    
    #Reading each line
    with open(fname) as f:
        content = file.readlines()
    #Get rid of \n that indicate a new line in the GED file
    content = [x.strip('\n') for x in content]
    content = [x.split() for x in content]
    flat_content = [val for sublist in content for val in sublist]
    
    file.close()

flat_content = OpenFile.flat_content

class ChildCount:
    
    FamCount = 0
    ChildCount = 0
    
    for i in [i for i,x in enumerate(flat_content) if x == 'WIFE']:
        
        for i in [i for i,x in enumerate(flat_content) if x == 'CHIL']:
            
            ChildCount = ChildCount +1 
            
    if (ChildCount > 25):
        print "Too many Children in one family"
    else:
        print " Not too many childern per family"      
        
    FamCount = FamCount +1
    
print ChildCount.ChildCount 

USERSTORY 7: Kids Before Marriage
class OpenFile:
    # Open the file using open function
    file = open("family_correct.ged", "r")
    
    fname = file.name

    # Reading each line
    with open(fname) as f:
        content = file.readlines()
    # Get read of \n that indicate a new line in the GED file
    content = [x.strip('\n') for x in content]
    content = [x.split() for x in content]
    flat_content = [val for sublist in content for val in sublist]
    
    file.close()

flat_content = OpenFile.flat_content

class KidsBeforeMarriage:
    
    Wife = []
    Marriage = []
    
       
    for j in [j for j,y in enumerate(flat_content) if y == 'WIFE']: 
       Wife.append(flat_content[j])
       
    for k in [k for k,z in enumerate(flat_content) if z == 'MARR']: 
       Marriage.append(flat_content[k])
    
    for p in range(0, len(Wife)):
        if(Wife[p] == 'WIFE' and Marriage[p] == 'MARR'):
            p = p + 1;
            print "Married and is eligible to have kids"
        else:
            print "Kids Before Marriage is not possible"
            p = p + 1;
            
    print Wife
    print Marriage

USERSTORY 8:Marriage after Death
class OpenFile:
    # Open the file using open function
    file = open("family_correct.ged", "r")
    
    fname = file.name

    # Reading each line
    with open(fname) as f:
        content = file.readlines()
    # Get read of \n that indicate a new line in the GED file
    content = [x.strip('\n') for x in content]
    content = [x.split() for x in content]
    flat_content = [val for sublist in content for val in sublist]
    
    file.close()

flat_content = OpenFile.flat_content

class MarriageAfterDeath:
    
    i=0
    j=0
    Deathday = []
    Marriageday = []
    Individualcount = []
    #find marriage dates
    for i in [i for i,x in enumerate(flat_content) if x == 'DEAT']: 
        Deathday.append(flat_content[i+6])
        
    #find marriage dates
    for j in [j for j,y in enumerate(flat_content) if y == 'MARR']: 
        Marriageday.append(flat_content[j+5])
    
    #count individuals dates
    for p in [p for p,z in enumerate(flat_content) if z == 'INDI']: 
        Individualcount.append('1')
    
    #fill the empty fields in death and marriage
    for count in range(len(Deathday), len(Individualcount)):
        Deathday.append('0')
    
    for count in range(len(Marriageday), len(Individualcount)):
        Marriageday.append('0')
    
    #compare death dates with marriage dates
    for k in range(0, len(Individualcount)):
        if(Deathday[k] == '0' or Marriageday[k] == '0'):
            k = k + 1
        elif(Deathday[k] > Marriageday[k]):
            print "Death date is: "+Deathday[k]+" Marriage date is: "+Marriageday[k]+" Marriage data is correct"
            k = k + 1
        else:
            print "Death date is: "+Deathday[k]+" Marriage date is: "+Marriageday[k]+" Marriage data is INCORRECT"
            k = k + 1

USERSTORY 9: MArriage While Married

class OpenFile:
    # Open the file using open function
    file = open("family_correct.ged", "r")
    
    fname = file.name

    # Reading each line
    with open(fname) as f:
        content = file.readlines()
    # Get read of \n that indicate a new line in the GED file
    content = [x.strip('\n') for x in content]
    content = [x.split() for x in content]
    flat_content = [val for sublist in content for val in sublist]
    
    file.close()
flat_content = OpenFile.flat_content

class MarriageWhileMarried:
    
    Marriage = []
    
    for i in [i for i,x in enumerate(flat_content) if x == 'MARR']: 
       Marriage.append(flat_content[i+7])
    
    count = 0
    while (count < len(Marriage)):
        if(Marriage[count] == '_CURRENT'):
            print "Marriage while married is not possible"
        elif (Marriage[count] == 'DIV'):
            print "Person is Divorsed and is eligible to get married"
        else:
            print "Person is never married"
        count = count + 1;
            
    print Marriage
    
USERSTORY 10: Maximum Age of an Individual

import time

class OpenFile:
    # Open the file using open function
    file = open("family_correct.ged", "r")
    fname = file.name
    # Reading each line
    with open(fname) as f:
        content = file.readlines()
    # Get read of \n that indicate a new line in the GED file
    content = [x.strip('\n') for x in content]
    content = [x.split() for x in content]
    flat_content = [val for sublist in content for val in sublist]
    file.close()
flat_content = OpenFile.flat_content

class MaximumAge:  
    Birthday = []
    Deathday = []
    #find marriage dates
    for i in [i for i,x in enumerate(flat_content) if x == 'BIRT']: 
        Birthday.append(flat_content[i+5])
        birthyear = int(flat_content[i+5])
        yeartodate = int(time.strftime("%Y"))
        if(flat_content[i+7] == 'DEAT'):
            deathday = int(flat_content[i+13])
            if(deathday - birthyear > 125):
                print "Maximum Age Limit is 125 years."
                Deathday.append(deathday)
            else:
                Deathday.append('Died at the age of ' + str(deathday - birthyear))
        elif(yeartodate - birthyear > 125):
            print "Has exceeded Maximum Age Limit of 125 years."
            Deathday.append('Age is ' + str(deathday - birthyear) + ', which is above the limit')
        else:
            Deathday.append('ALIVE')

print MaximumAge.Birthday
print MaximumAge.Deathday

